FROM amd64/debian:12

########################################
# Prepare a building environment
########################################

RUN echo 'deb-src http://deb.debian.org/debian bookworm main' >> /etc/apt/sources.list
RUN echo 'deb-src http://security.debian.org/debian-security bookworm-security main' >> /etc/apt/sources.list
RUN echo 'deb-src http://deb.debian.org/debian bookworm-updates main' >> /etc/apt/sources.list

RUN apt-get update
RUN apt-get -y build-dep wine
RUN apt-get -y install git llvm clang wget
RUN apt-get -y install libjs-mathjax python3-yaml lib32gcc-s1 lib32stdc++6 libc6-i386 libctypes-ocaml-dev ocaml-nox libjs-jquery python3-six python3-pygments libjs-underscore cmake
RUN apt-get -y install gcc-mingw-w64-i686 gcc-mingw-w64-x86-64
RUN apt-get -y install texinfo

RUN git clone https://github.com/tpoechtrager/osxcross /root/osxcross
COPY darwin/SDK/MacOSX10.13.sdk.tar.xz /root/osxcross/tarballs/
RUN ln -s "/root/osxcross/target/SDK/MacOSX10.13.sdk/System" "/System"

### Clang 8
RUN mkdir /root/clang-8
WORKDIR /root/clang-8
RUN wget https://repository.playonlinux.com/clang8/llvm-8-mwine32-release.tar.gz
RUN tar -xvf llvm-8-mwine32-release.tar.gz

RUN cd /root/osxcross && OSX_VERSION_MIN=10.8 UNATTENDED=1 ./build.sh

# We want the custom Clang first in path so OSXCROSS wrappers use that
ENV PATH="/root/clang-8/llvm/bin:/root/osxcross/target/bin:${PATH}"

### OSXCROSS envirument settings;
ENV MACOSX_DEPLOYMENT_TARGET="10.13"
# OSXCROSS will handle headers/libraries/frameworks injection
ENV OSXCROSS_MP_INC="YES"
ENV CFLAGS="-msse2 -O3 -Wno-unused-command-line-argument -Wno-deprecated-declarations"

# Copy in premade wrappers
COPY darwin/wrappers/* /root/osxcross/target/bin/

########################################
# Install build scripts
########################################
RUN mkdir -p  /build-scripts/
ADD build-scripts/darwin/ /build-scripts/
ADD build-scripts/darwin/common/ /build-scripts/
ENV PATH="/build-scripts:${PATH}"


########################################
# Lets make folders to keep compiled libs inside
########################################
RUN mkdir -p "/root/osxcross/target/macports/pkgs/opt/local"
RUN ln -s "/root/osxcross/target/macports/pkgs/opt/local" "/opt/local"
RUN printf "packages.macports.org" > /root/osxcross/target/macports/MIRROR

RUN mkdir -p /opt/local/lib32
RUN mkdir -p /opt/local/lib64
RUN mkdir -p /opt/local/include


########################################
# Install wine dependencies
########################################
RUN VERSION="3.7.3" ARCH="i386" nettle.sh
RUN VERSION="3.7.3" ARCH="x86_64" nettle.sh

RUN VERSION="4.17.0" ARCH="i386" libtasn1.sh
RUN VERSION="4.17.0" ARCH="x86_64" libtasn1.sh

RUN VERSION="6.2.1" ARCH="x86_64" gmp.sh
RUN VERSION="6.2.1" ARCH="i386" gmp.sh

RUN install-staging-libs.sh


RUN VERSION="3.7.2" ARCH="x86_64" gnutls.sh
RUN VERSION="3.7.2" ARCH="i386" gnutls.sh

# Only around to keep macports libraries happy
RUN VERSION="6.3" ARCH="x86_64" ncurses.sh
RUN VERSION="6.3" ARCH="i386" ncurses.sh

RUN VERSION="2.0.22" ARCH="x86_64" SDL2.sh
RUN VERSION="2.0.22" ARCH="i386" SDL2.sh

# FAudio-22.01 is the last version with the gstreamer backend, keep at this version for pre-wine-6.20
RUN VERSION="22.01" ARCH="x86_64" faudio.sh
RUN VERSION="22.01" ARCH="i386" faudio.sh

# Now included upstream from wine-6.20
RUN VERSION="1.29.3" ARCH="x86_64" mpg123.sh
RUN VERSION="1.29.3" ARCH="i386" mpg123.sh

RUN chmod +x /build-scripts/libpng.sh
RUN chmod +x /build-scripts/freetype.sh

RUN VERSION="1.6.40" ARCH="x86_64" libpng.sh
RUN VERSION="1.6.40" ARCH="i386" libpng.sh

RUN VERSION="2.13.1" ARCH="x86_64" freetype.sh
RUN VERSION="2.13.1" ARCH="x86_64" freetype.sh

# We need to compile ncurses by ourselves (see above) to avoid terminals database is inaccessible error
# This will prevent wine-devel from installing it
RUN osxcross-macports -universal fakeinstall ncurses
RUN osxcross-macports -universal fakeinstall pulseaudio
RUN osxcross-macports -universal fakeinstall py310-markupsafe
RUN osxcross-macports -universal fakeinstall graphene
RUN osxcross-macports -universal fakeinstall Xft2
RUN osxcross-macports -universal fakeinstall mesa
RUN osxcross-macports -universal fakeinstall libxslt
RUN osxcross-macports -universal fakeinstall xorg-apps
RUN osxcross-macports -universal fakeinstall xorg
RUN osxcross-macports -universal fakeinstall xorg-server

RUN osxcross-macports -universal fakeinstall xorg-server
RUN osxcross-macports -universal fakeinstall xorg-xorgproto
RUN osxcross-macports -universal fakeinstall xorg-libpthread-stubs
RUN osxcross-macports -universal fakeinstall xorg-libxcb
RUN osxcross-macports -universal fakeinstall py311-setuptools
RUN osxcross-macports -universal fakeinstall py311-markupsafe
RUN osxcross-macports -universal fakeinstall py311-markdown

RUN osxcross-macports -universal fakeinstall libpng
RUN osxcross-macports -universal fakeinstall icu

RUN osxcross-macports -universal fakeinstall freetype
RUN osxcross-macports -universal fakeinstall gettext-runtime
RUN osxcross-macports -universal fakeinstall gettext
RUN osxcross-macports -universal fakeinstall libtextstyle
RUN osxcross-macports -universal fakeinstall glib2


RUN MACOSX_DEPLOYMENT_TARGET="10.11" osxcross-macports -universal install wine-devel
RUN osxcross-macports install MoltenVK

# VKD3D Merged into upstream from wine-7.4

## Import fix
COPY darwin/fix_imports.sh /root/


## Removing preinstalled wine libs to prevent conflict
RUN rm /opt/local/lib/libwine.*
RUN rm -r /opt/local/lib/wine
RUN rm -r /opt/local/include/wine/

RUN apt -y install gobjc++-mingw-w64
