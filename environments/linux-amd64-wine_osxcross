FROM amd64/debian:buster

RUN echo 'deb-src http://deb.debian.org/debian buster main' >> /etc/apt/sources.list
RUN echo 'deb-src http://security.debian.org/debian-security buster/updates main' >> /etc/apt/sources.list
RUN echo 'deb-src http://deb.debian.org/debian buster-updates main' >> /etc/apt/sources.list

RUN apt-get update
RUN apt-get -y build-dep wine
RUN apt-get -y install git llvm clang wget
RUN apt-get -y install libjs-mathjax python-yaml lib32gcc1 lib32stdc++6 libc6-i386 libctypes-ocaml-dev ocaml-nox libjs-jquery python-six python-pygments libjs-underscore cmake
RUN apt-get -y install gcc-mingw-w64-i686 gcc-mingw-w64-x86-64

RUN git clone https://github.com/tpoechtrager/osxcross /root/osxcross
COPY darwin/SDK/MacOSX10.13.sdk.tar.xz /root/osxcross/tarballs/

## Clang 8
RUN mkdir /root/clang-8
WORKDIR /root/clang-8
RUN wget https://repository.playonlinux.com/clang8/llvm-8-mwine32-release.tar.gz
RUN tar -xvf llvm-8-mwine32-release.tar.gz

RUN cd /root/osxcross && OSX_VERSION_MIN=10.9 UNATTENDED=1 CC=/root/clang-8/llvm/bin/clang CXX=/root/clang-8/llvm/bin/clang++ ./build.sh

# We want the custom Clang first in path so OSXCROSS wrappers use that
ENV PATH="/root/clang-8/llvm/bin:/root/osxcross/target/bin:${PATH}"

# OSXCROSS envirument settings;
ENV MACOSX_DEPLOYMENT_TARGET="10.13"
# OSXCROSS will handle headers/libraries/frameworks injection
ENV OSXCROSS_MP_INC="YES"

RUN mkdir -p /root/osxcross/target/macports
RUN printf "packages.macports.org" > /root/osxcross/target/macports/MIRROR

# We need to compile ncurses by ourselves (see above) to avoid terminals database is inaccessible error
# This will prevent wine-devel from installing it
RUN osxcross-macports -universal fakeinstall ncurses
RUN osxcross-macports -universal fakeinstall pulseaudio
RUN MACOSX_DEPLOYMENT_TARGET="10.11" osxcross-macports -universal install wine-devel

# symlink "/root/osxcross/target/macports/pkgs/opt/local" to /opt/local
RUN ln -s "/root/osxcross/target/macports/pkgs/opt/local" "/opt/local"
# Symlink "/System" to avoid "ld: warning: directory not found for option '-F/System/Library/Frameworks/'"
RUN ln -s "/root/osxcross/target/SDK/MacOSX10.13.sdk/System" "/System"

# Lets make folders to keep compiled libs inside
RUN mkdir /opt/local/lib32
RUN mkdir /opt/local/lib64

# Copy in premade wrappers
COPY darwin/wrappers/* /root/osxcross/target/bin/

### Environment preparation
ENV CFLAGS="-msse2 -O3 -Wno-unused-command-line-argument -Wno-deprecated-declarations"

### NCurses Source code
# We need to build manually ncurses so that TERMINFO is not set to /opt/local/share/terminfo to avoid
# terminals database is inaccessible error
RUN mkdir /root/ncurses
WORKDIR /root/ncurses
RUN wget https://ftp.gnu.org/pub/gnu/ncurses/ncurses-6.2.tar.gz
RUN tar -xvf  ncurses-6.2.tar.gz
WORKDIR /root/ncurses/ncurses-6.2
COPY darwin/ncurses_STRIP.patch .
RUN patch -p1 < ncurses_STRIP.patch

### NCurses 32Bit
RUN env STRIP="i386-apple-darwin17-strip" ./configure --host i386-apple-darwin17 --with-shared --without-cxx-binding --without-cxx --enable-widec --disable-lib-suffixes --enable-overwrite --without-debug --without-ada  --with-manpage-format=normal --enable-pc-files --disable-mixed-case  --prefix="/opt/local" --enable-rpath --datarootdir=/usr/share
RUN make -j 4
RUN make install
RUN mv /opt/local/lib/libncurses.6.dylib /opt/local/lib32/
# RUN mv /opt/local/lib/libncurses++.6.dylib /opt/local/lib32/

### NCurses 64Bit
RUN make clean
RUN env STRIP="x86_64-apple-darwin17-strip" ./configure --host x86_64-apple-darwin17 --with-shared --without-cxx-binding --without-cxx --enable-widec --disable-lib-suffixes --enable-overwrite --without-debug --without-ada  --with-manpage-format=normal --enable-pc-files --disable-mixed-case  --prefix="/opt/local" --enable-rpath --datarootdir=/usr/share
RUN make -j 4
RUN make install
RUN mv /opt/local/lib/libncurses.6.dylib /opt/local/lib64/
# RUN mv /opt/local/lib/libncurses++.6.dylib /opt/local/lib64/

### Merge the NCurses into a single file
RUN x86_64-apple-darwin17-lipo /opt/local/lib32/libncurses.6.dylib /opt/local/lib64/libncurses.6.dylib -output /opt/local/lib/libncurses.6.dylib -create
# RUN x86_64-apple-darwin17-lipo /opt/local/lib32/libncurses++.6.dylib /opt/local/lib64/libncurses++.6.dylib -output /opt/local/lib/libncurses++.6.dylib -create

### SDL2 Source code
# We need to build manually SDL2 as macports does not have a universal version for download but we need one.
ENV SDL2="SDL2-2.0.12"
RUN mkdir /root/sdl2
WORKDIR /root/sdl2
RUN wget https://www.libsdl.org/release/${SDL2}.tar.gz
RUN tar -xvf  ${SDL2}.tar.gz
WORKDIR /root/sdl2/${SDL2}
COPY darwin/sdl2-config.cmake.in-fix.patch .
RUN patch -p0 < sdl2-config.cmake.in-fix.patch

### SDL2 32Bit
RUN ./configure --host i386-apple-darwin17  --prefix="/opt/local"
RUN make -j 4
RUN make install-hdrs
RUN make install-lib
RUN make install-data
RUN mv /opt/local/lib/libSDL2-2.0.0.dylib /opt/local/lib32/

### SDL2 64Bit
RUN make clean
RUN ./configure --host x86_64-apple-darwin17 --disable-render-metal --prefix="/opt/local"
RUN make -j 4
RUN make install-hdrs
RUN make install-lib
RUN make install-data
RUN mv /opt/local/lib/libSDL2-2.0.0.dylib /opt/local/lib64/

### Merge the SDL2 into a single file
RUN x86_64-apple-darwin17-lipo /opt/local/lib32/libSDL2-2.0.0.dylib /opt/local/lib64/libSDL2-2.0.0.dylib -output /opt/local/lib/libSDL2-2.0.0.dylib -create

### Vulkan
ENV MOLTENVK="1.2.135.0"
WORKDIR /root/
RUN wget https://sdk.lunarg.com/sdk/download/${MOLTENVK}/mac/vulkansdk-macos-${MOLTENVK}.tar.gz
RUN tar -xvf vulkansdk-macos-${MOLTENVK}.tar.gz
WORKDIR /root/vulkansdk-macos-${MOLTENVK}/MoltenVK/macOS
RUN mv framework/* /opt/local/Library/Frameworks/
RUN mv dynamic/* /opt/local/lib/

### VK3D3
#ENV VKD3D="vkd3d-1.1"
#WORKDIR /root
#RUN git clone https://github.com/KhronosGroup/SPIRV-Headers
#RUN cp -a /root/SPIRV-Headers/include/* /opt/local/include/
#RUN cp -r /root/vulkansdk-macos-${MOLTENVK}/macOS/include/* /opt/local/include/
#RUN apt-get install -y libtool-bin
#COPY darwin/install_vkd3d.sh /root/

## Import fix
COPY darwin/fix_imports.sh /root/

# Faudio - Upgrading past 20.03 means dropping 10.8 support!
ENV FAUDIO="20.06"
RUN mkdir -p /root/faudio
WORKDIR /root/faudio
RUN git clone -b "${FAUDIO}" https://github.com/FNA-XNA/FAudio
RUN mkdir -p /root/faudio/build64
RUN mkdir -p /root/faudio/build32
RUN mkdir -p /root/faudio/build
WORKDIR /root/faudio/build64
RUN x86_64-apple-darwin17-cmake /root/faudio/FAudio
RUN make
RUN make install DESTDIR=install/
RUN cp install/usr/local/include/* /opt/local/include

WORKDIR /root/faudio/build32
RUN i386-apple-darwin17-cmake /root/faudio/FAudio
RUN make
WORKDIR /root/faudio/build
RUN x86_64-apple-darwin17-lipo ../build32/libFAudio.0.$FAUDIO.dylib ../build64/libFAudio.0.$FAUDIO.dylib -output libFAudio.0.$FAUDIO.dylib -create
RUN ln -s libFAudio.0.$FAUDIO.dylib libFAudio.dylib
RUN ln -s libFAudio.0.$FAUDIO.dylib libFAudio.0.dylib
RUN cp -d *.dylib /opt/local/lib

## Removing preinstalled wine libs to prevent conflict
RUN rm /opt/local/lib/libwine.*
RUN rm -r /opt/local/lib/wine
RUN rm -r /opt/local/include/wine/
